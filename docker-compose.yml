x-superset-user: &superset-user root
x-superset-volumes: &superset-volumes
  - ./docker:/app/docker
  - ./docker/superset_config.py:/app/pythonpath/superset_config.py

services:
  db:
    container_name: postgres_container
    image: postgres:13
    ports:
      - 5000:5432
    environment:
      POSTGRES_DB: db
      POSTGRES_USER: db_user
      POSTGRES_PASSWORD: db_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres/airflow_init.sql:/docker-entrypoint-initdb.d/airflow_init.sql
      - ./postgres/superset_init.sql:/docker-entrypoint-initdb.d/superset_init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U db_user -d db"]
      interval: 5s
      retries: 10
    networks:
      - my-network

  af:
    container_name: airflow_container
    image: apache/airflow:3.1.0
    ports:
      - 8000:8080
    environment:
      AIRFLOW_DATABASE_SQL_ALCHEMY_CONN: postgres+psycopg2://airflow:airflow@db:5432/airflow_db
      AIRFLOW__WEBSERVER__AUTHENTICATE: "False"
      # Use PWD (present working directory) which is automatically set by docker-compose
      # This gets the absolute path of the directory containing docker-compose.yml
      HOST_PROJECT_PATH: ${PWD}
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./api-request:/opt/airflow/api-request
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dbt:/opt/airflow/dbt
    group_add:
      - '1001'
    depends_on:
      db:
        condition: service_healthy
    networks:
      - my-network
    command: >
      bash -c "airflow db migrate && airflow standalone"

  dbt:
    container_name: dbt_container
    image: ghcr.io/dbt-labs/dbt-postgres:1.9.latest
    volumes:
      - ./dbt/my_project:/usr/app 
      - ./dbt/profiles.yml:/root/.dbt/profiles.yml
    working_dir: /usr/app
    environment:
      DBT_PROFILES_DIR: "/root/.dbt"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - my-network
    command: run  

  superset-init:
    image: apache/superset:3.0.0-py310
    container_name: superset_init
    command: ["/app/docker/docker-init.sh"]
    env_file:
      - path: docker/.env
        required: true
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    user: *superset-user
    volumes: *superset-volumes
    environment:
      SUPERSET_LOAD_EXAMPLES: "no"
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
      DATABASE_DB: "superset_db"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U db_user -d db"]
      interval: 5s
      retries: 10
    networks:
      - my-network

  superset:
    env_file:
      - path: docker/.env
        required: true
    image: apache/superset:3.0.0-py310
    container_name: superset_app
    command: ["/app/docker/docker-bootstrap.sh", "app"]
    restart: unless-stopped
    ports:
      - 8088:8088
    user: *superset-user
    depends_on:
      superset-init:
        condition: service_completed_successfully
    volumes: *superset-volumes
    environment:
      SUPERSET_LOG_LEVEL: "${SUPERSET_LOG_LEVEL:-info}"
      DATABASE_DB: "superset_db"
    networks:
      - my-network

  redis:
    image: redis:7
    container_name: superset_cache
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"
    volumes:
      - redis:/data
    networks:
      - my-network

networks:
  my-network:
    name: weather-data-project_my_network
    driver: bridge

volumes:
  redis:
  postgres_data: